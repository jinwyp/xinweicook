angular.module('xw', ['xw.config', 'xw.services', 'xw.controllers', 'xw.directives', 'xw.filters']);

angular.module('xw.config', ['ngStorage']);

angular.module('xw.models', ['ngStorage']);

angular.module('xw.controllers', ['xw.models', 'xw.weixin']);

angular.module('xw.directives', ['xw.models']);

angular.module('xw.filters', []);

angular.module('xw.weixin', []); // tmp

angular.module('xw.services', []);
//generated by gulp errcode
angular.module("xw.config").constant("errCode", function(){
return {
    user: {
        // 第一位是大项分类,第二位是子分类 第三位开始一次排序 间隔建议为2或5 方便以后插入
        wrongMobile   : 1110,
        wrongPassword : 1111,
        alreadyExist  : 1112,
        notFound      : 1113,

        userReferrerWrong : 1140,

        userIdWrong : 1150,
        userGenderWrong : 1152,
        userOldAddressWrong : 1155,

        invitationSendCodeWrong : 1190,

        addressIdWrong : 1210,
        addressNotFound : 1212,
        addressNotInUser : 1214,

        addressLatitudeWrong  : 1220,
        addressLongitudeWrong : 1221,
        addressCoordTypeWrong : 1222,

        addressProvinceWrong     : 1225,
        addressCityWrong         : 1226,
        addressDistrictWrong     : 1227,
        addressStreetWrong       : 1228,
        addressStreetNumberWrong : 1229,
        addressAddressWrong      : 1230,

        addressContactPersonWrong : 1235,
        addressMobileWrong        : 1236,
        addressSortOrderWrong     : 1237,

        addressNotDeliver     : 1270,

        addressBaiduMapNotFoundError     : 1280,
        addressBaiduMapQueryWrong     : 1290,
        addressBaiduMapRegionWrong     : 1291,


        shoppingCartNotArray     : 1500,
        shoppingCartDishIdWrong     : 1502,
        shoppingCartDishNumberWrong     : 1504,
        shoppingCartSubDishIdWrong     : 1506,
        shoppingCartSubDishNumberWrong     : 1508





    },
    order: {
        notFound: 2010,

        orderNumberWrong: 2010,
        orderIdWrong: 2011,
        warehouseIdWrong: 2012,

        cookingTypeWrong: 2110,
        clientFromWrong: 2112,

        creditWrong: 2115,
        freightWrong: 2117,
        paymentWrong: 2119,
        paymentUsedCashWrong: 2120,

        deliveryDateCookWrong: 2122,
        deliveryTimeCookWrong: 2124,
        deliveryDateEatWrong: 2126,
        deliveryTimeEatWrong: 2128,

        dishListArrayWrong: 2130,
        dishListDishNumberWrong: 2132,
        dishListDishIdWrong: 2134,
        dishListSubDishArrayWrong: 2136,
        dishListSubDishNumberWrong: 2138,
        dishListSubDishIdWrong: 2139,


        addressLatitudeWrong  : 2140,
        addressLongitudeWrong : 2142,

        addressProvinceWrong     : 2144,
        addressCityWrong         : 2145,
        addressDistrictWrong     : 2146,
        addressStreetWrong       : 2147,
        addressStreetNumberWrong : 2148,
        addressAddressWrong      : 2149,

        addressContactPersonWrong : 2152,
        addressMobileWrong        : 2154,

        addressIdWrong : 2160,

        userCommentWrong: 2180,

        dishIdInvalid: 2190,
        notOnlyDrink: 2192,
        notOverTenDrinks: 2194,


        orderStatusWrong: 2300,
        orderPaymentStatusWrong: 2310




    },
    sms: {
        wrongCode: 3110,
        expired: 3111,
        invalidCode: 3112,
        wrongType: 3113,
        tooManyTries: 3114,
        sendFailed: 3115,
        reachSendLimitation: 3116
    },
    dish: {
        outOfStock: 4110
    },
    coupon: {

        notStart: 5110,
        expired: 5111,
        used: 5112,
        outOfCount: 5113,
        notFound      : 5120,
        exchanged: 5121,

        couponIdWrong : 5210,
        promotionCodeWrong : 5212
    },

    announcement: {
        announcementIdWrong : 8110,
        notFound: 8112
    }
};
});
angular.module('xw.config').factory('commonInterceptor', ['$localStorage', '$q', function($localStorage, $q) {
    var noRedirectPath = [/^\/mobile\/$/, /^\/mobile\/login/, /^\/mobile\/cook/, /^\/mobile\/resetpwd$/];
    var noRedirectAPI = ['/api/user', '/api/user/token', '/api/user/shoppingcart', '/api/user/address'];
    var loginRedirectPath = ['/mobile/me', '/mobile/addresslist', '/mobile/orderaddress', '/mobile/orderlist',
        '/mobile/invite', '/mobile/coupons', '/mobile/cook', '/mobile/balance', '/mobile/chargebalanceonline',
        '/mobile/promotion01'];

    return {
        'request': function(config) {
            if ($localStorage.access_token) {
                config.headers.Authorization = 'Bearer ' + $localStorage.access_token;
            }

            return config;
        },

        'responseError': function(response) {
            // do something on error
            var redirectPath = '';
            if (response.status == 401) {
                // todo: redirect
                if (noRedirectPath.some(function (RE) {return RE.test(location.pathname)})) {
                    if (noRedirectAPI.indexOf(response.config.url) != -1) {
                        return $q.reject(response);
                    }
                }
                if (loginRedirectPath.some(function(path){
                        return location.pathname.indexOf(path) != -1
                    })) {
                    redirectPath = '?redirect=' + location.pathname
                }
                setTimeout(function () {
                    // todo:
                    location.replace('/mobile/login' + redirectPath);
                }, 120);
            }
            return $q.reject(response);
        }
    };
}]);


angular.module('xw.config').config(['$httpProvider', '$compileProvider',
    function($httpProvider, $compileProvider) {
        // http interceptor
        $httpProvider.defaults.headers.common.Accept = 'application/vnd.cook.v1+json';
        $httpProvider.defaults.headers.common['Access-Control-Allow-Origin'] = 'http://m.xinweicook.com';
        $httpProvider.defaults.headers.common['Accept-Language'] = navigator.language == 'zh-CN' ? 'zh-CN' : 'en-US';
        $httpProvider.defaults.headers.common['Content-Type'] = 'application/json';

        $httpProvider.interceptors.push('commonInterceptor');

        // disable debug data for performance.
        $compileProvider.debugInfoEnabled(false);
    }
]);


angular.pick = function (obj) {
    var keys = Array.prototype.slice.call(arguments, 1);
    return keys.reduce(function (o, k) {
        o[k] = obj[k];
        return o;
    }, {});
};

angular.sort = function sort (_array, compare) {
    var array = _array.slice(0);
    var tmp;
    for (var l = array.length - 1; l >= 1; l--) {
        for (var i = 0; i < l; i++) {
            var result = compare(array[i], array[i + 1]);
            if (result > 0) {
                tmp = array[i];
                array[i] = array[i + 1];
                array[i + 1] = tmp;
            }
        }
    }
    return array;
};

/**
 * 图片自适应为屏幕宽度
 */
angular.module('xw.filters').filter('adapt', function () {
    var width = Math.floor(document.body.offsetWidth * window.devicePixelRatio);
    var height = Math.floor(width * 2 / 3);
    var prefix = '?imageView2/1/w/';
    var query = prefix + width + '/h/' + height;
    return function (src, ratio) {
        return src + (ratio ?
                prefix + width + '/h/' + Math.floor(width * ratio) :
                query)
    }
});

/**
 *  将类似于1/2的文本显示为¹⁄₂
 */
angular.module('xw.filters').filter('fraction', function () {
    var superscripts = ['⁰', '¹', '²', '³', '⁴', '⁵', '⁶', '⁷', '⁸', '⁹'];
    var subscripts = ['\u2080', '\u2081', '\u2082', '\u2083', '\u2084',
        '\u2085', '\u2086', '\u2087', '\u2088', '\u2089'];

    function i2s(sval, scripts) {
        var ret = '';
        for (var i = 0; i < sval.length; i++) {
            ret += scripts[sval[i]]
        }
        return ret;
    }

    return function (str) {
        return str.replace(/(\d+)\/(\d+)/g, function (_, sup, sub) {
            return i2s(sup, superscripts) + '⁄' + i2s(sub, subscripts) + ' ';
        })
    }
});

/**
 * 将服务器传回来的dish结构的数据转换为post dish更新购物车时需要的格式(不在模板中使用)
 */
angular.module('xw.filters').filter('postDish', function () {
    return function (dish) {
        return {
            dish: dish.dish._id,
            number: dish.number,
            subDish: !dish.subDish ? [] : dish.subDish.map(function (el) {
                return {
                    dish: el.dish._id,
                    number: el.number
                }
            })
        }
    }
});

/**
 * 使mobile变成 133 3333 3333这种形式, 有更好的可读性
 */
angular.module('xw.filters').filter('beautifyMobile', function () {
    return function (mobile) {
        if (!/^\d{11}$/.test(mobile)) return mobile;
        return mobile.replace(/^(\d{3})(\d{4})(\d{4})$/,
            function (_, m1, m2, m3) {
                return m1 + ' ' + m2 + ' ' + m3;
            })
    }
});

/**
 * 使title变成 '/土豆泥' 这样的形式
 */
angular.module('xw.filters').filter('subDishTitle', function () {
    return function (item) {
        var last = item.subDish.length;
        if (!last) return '';
        return '(' + item.subDish.reduce(function (title, cur, i) {
            return title + cur.dish.title.zh + (i == last - 1 ? '' : '/')
        }, '') + ')';
    }
});

/**
 * 将查询返回的派送时间转换成下单所需要的形式[NOT FOR HTML]
 * time为{hour: ''}, 当type为eat时,
 * time为{day:{day:''}, time: {name: ''}}, 当type为cook时,
 * time为{eat: {hour}, cook:{day,time}}, 当type为all时.
 */
angular.module('xw.filters').filter('orderTime', function () {
    return function filter(time, type) {
        var ret;
        if (type == 'eat') {
            return {
                deliveryDateEat: time.hour.substr(0, 10),
                deliveryTimeEat: time.hour.substr(11, 5)
            }
        } else if (type == 'cook') {
            ret = {deliveryDateCook: time.day};
            ret.deliveryTimeCook = time.segment ? time.segment.name+':00' : '12:00';
            return ret;
        } else if (type == 'all') {
            ret = {};
            if (time.eat) ret = filter(time.eat, 'eat');
            if (time.cook) angular.extend(ret, filter(time.cook, 'cook'));
            return ret;
        }
    }
});

angular.module('xw.filters').filter('cookTimeUnion', function () {
    return function (times) {
        if (!times) {
            return times
        }

        var hasSegment = !!times[0].segment;

        return times.reduce(function (list, cur) {
            if (hasSegment) {
                cur.segment.forEach(function (item) {
                    list.push({
                        day: cur.day,
                        segment: item
                    })
                })
            } else {
                list.push({day: cur.day})
            }
            return list;
        }, [])
    }
})

/**
 * 有多种不同的dishList类型, 有些是从后端获得的, 有些是作为更新购物车post回去的,
 * 有些是前端为了展示方便而构造的, 此处对其做统一转换, 免去放在controller中的苦恼.
 * dishes: 待转换待原始数据. tType:target type. sType: source type
 * type: 'displayCart',用来展示待购物车的dish list
 *       'order', 用来下单的list
 *
 * examples:
 * displayCart, 为 {cookList: [], eatList: []}, 其中[]为如下形式
 * [{
 *   dish: Dish, // {_id: '', title: {zh:'', en: ''}, ...}
 *   subDish: [{dish},.]
 *   number
 * }, ..]
 *
 * order, 为 {dishList: []}, 其中[]为如下形式
 * [{
 *   dish: _id,
 *   number: number,
 *   subDish: [..]
 * }, ..]
 */
angular.module('xw.filters').filter('dishes', function () {
    return function (dishes, tType, sType) {
        var ret;
        // 将displayCart 转换为 order 类型的dishList
        if (tType == 'order' && sType == 'displayCart') {
            ret = [];
            Object.keys(dishes).forEach(function (key) {
                dishes[key].forEach(function (el) {
                    ret.push({
                        dish: el.dish._id,
                        number: el.number,
                        subDish: el.subDish.map(function (sDish) {
                            return {
                                dish: sDish.dish._id,
                                number: sDish.number
                            }
                        })
                    });
                });
            });

            return {dishList: ret}
        } else return dishes
    }
});

/**
 * 优惠券下单数据转换.要求传入当数据格式为: {code: '优惠码字符串', card: {优惠券对象}}
 */
angular.module('xw.filters').filter('coupon', function () {
    return function (coupon) {
        var ret = {};
        if (coupon.code) {
            ret.promotionCode = coupon.code;
            if (coupon.code.length == 8) {
                // tcl 优惠券特殊处理. 我们的优惠券要求必须是10位
                ret.promotionCode = 'zz' + ret.promotionCode;
            }
        }
        if (coupon.card) {
            ret.coupon = coupon.card._id;
        }
        return ret;
    }
});

/**
 * 便当配送时间选项补充上请选择时间
 */
angular.module('xw.filters').filter('eatTimeOptions', function () {
    return function (times) {
        if (!times || !times.length) return times;
        times.unshift({hour: '请选择配送时间'});
        return times;
    }
});

angular.module('xw.filters').filter('eatTimeDisplay', function () {
    return function (time) {
        return time.hour
    }
});

angular.module('xw.filters').filter('cookTimeOptions', function () {
    return function (times) {
        if (!times || !times.length) return times;
        times.unshift({day: '请选择配送时间'});
        return times
    }
});

angular.module('xw.filters').filter('cookTimeDisplay', function () {
    return function (time) {
        return time.day == '请选择配送时间' || time.segment ?
            time.day : time.day + ' 送达'
    }
});

// 返回购物车item的价格
angular.module('xw.filters').filter('dishPrice', function () {
    return function (item, total) {
        var price = item.dish.priceOriginal;
        if (item.subDish) {
            for (var i = 0, len = item.subDish.length; i < len; i++) {
                price += item.subDish[i].dish.priceOriginal;
            }
        }
        return price * (total ? item.number : 1);
    }
})


// 订单状态
angular.module('xw.filters').filter('orderStatus', function () {
    var _status = {
        'not paid': '未支付',
        'paid': '已支付',
        'confirmed': '已确认',
        'dish finished': '已完成',
        'packaged': '已打包',
        shipped: '配送中',
        finished: '已完成',
        canceled: '已取消'
    }
    
    return function(status) {
        return _status[status] || ''
    }
})

// 订单状态
angular.module('xw.filters').filter('orderId', function () {
    return function(orderId) {
        if (!orderId) return orderId
        var ret = []
        for (var i = 0; i < orderId.length; i+=4) {
            ret.push(orderId.substr(i, 4))
        }
        return ret.join(' ')
    }
})

// 支付方式
angular.module('xw.filters').filter('payment', function () {
    var _payment = {
        'alipay direct': '支付宝',
        'weixinpay':'微信钱包',
        'account balance': '新味币'
    }
    return function(payment) {
        return _payment[payment] || payment
    }
})


angular.module('xw.models').factory('Dishes', ["$http", function ($http) {

    return {
        getList: function (cookingType) {
            cookingType = cookingType || '';
            return $http.get(
                '/api/dishes?' +
                'cookingType=' + cookingType
            );
        },
        like: function (id) {
            return $http.put('/api/dishes/' + id + '/like');
        },
        getOne: function (id) {
            return $http.get('/api/dishes/' + id);
        }
    }
}]);

angular.module('xw.models').factory('Orders', ["$http", function ($http) {
    return {
        postOrder: function (data) {
            return $http.post('/api/orders', data);
        },
        deliveryTime: function (data) {
            return $http.post('/api/orders/delivery/time', data)
        },
        deliveryEatTime: function (data) {
            return $http.post('/api/orders/delivery/time/eat/warehouse', data)
        },
        getOrder: function (orderId) {
            return $http.get('/api/orders/' + orderId);
        },
        updateOrder: function (id, data) {
            return $http.put('/api/orders/' + id, data)
        },
        cancel: function (id) {
            return $http.put('/api/orders/' + id, {
                isPaymentPaid: "false",
                status: "canceled"
            })
        },
        getList: function () {
            return $http.get('/api/orders');
        },
        getUnifiedOrder: function (data) {
            return $http.post('/api/orders/payment/weixinpay/unifiedorder', data);
        },
        price: function (data) {
            return $http.post('/api/orderprice', data);
        },
        payByAlipay: function (id) {
            return $http.post('/api/orders/payment/alipay/sign', {_id: id})
        }
    }
}]);

angular.module('xw.models').factory('User', ["$http", "$localStorage", function ($http, $localStorage) {
    // 这些变量作为更新购物车用
    // 最近一次添加至cart的时间
    var cartDate = Date.now();
    var timeSpan = 500;
    var timer = null;

    return {
        login: function (username, password, couponcode) {
            var args = {
                username: username,
                password: password,
                grant_type: 'password'
            };
            if (couponcode) args.couponcode = couponcode;
            return $http.post('/api/user/token', args).then(function (res) {
                if (res.data && res.data.access_token) {
                    $localStorage.access_token = res.data.access_token;
                }

                return res;
            })
        },
        signup: function (mobile, pwd, code, couponcode, referrer) {
            var opts = {
                mobile: mobile,
                pwd: pwd,
                code: code,
                referrer: referrer || ''
            };
            if (couponcode) {
                opts.couponcode = couponcode;
            }
            return $http.post('/api/user/signup', opts).then(function (res) {
                if (res.data && res.data.access_token) {
                    $localStorage.access_token = res.data.access_token;
                }

                return res;
            })
        },
        getSmsCode: function (data) {
            return $http.post('/api/user/sms', data)
        },
        logout: function () {
            return $http.post('/api/user/logout', {
                token_type_hint: "access_token",
                token: $localStorage.access_token
            })
        },
        getUserInfo: function () {
            return $http.get('/api/user').then(function (res) {
                localStorage.uid = res.data._id
                window.trackJs.configure({ userId: res.data._id})
                return res;
            })
        },
        updateUser: function (data) {
            return $http.put('/api/user', data)
        },
        resetPwd: function (mobile, pwd, code) {
            return $http.post('/api/user/resetpassword', {
                mobile: mobile,
                pwd: pwd,
                code: code
            });
        },
        postCart: function (cart) {
            var now = Date.now();
            if (now - cartDate > timeSpan) {
                clearTimeout(timer);
                return $http.post('/api/user/shoppingcart', {shoppingCart: cart});
            } else {
                clearTimeout(timer);
                timer = setTimeout(this.postCart.bind(this, cart), timeSpan + 100)
            }
            cartDate = now;
            return {'catch': angular.noop}
        },
        applyInvitationCode: function (code) {
            return $http.get('/api/user/coupon/invitation/' + code)
        },
        invitedFriends: function () {
            return $http.get('/api/user/coupon/friends');
        },

        getWeixinUserInfo: function (id) {
            return $http.get('/api/user/weixin/userinfo?userId=' + id);
        }

    }
}]);

angular.module('xw.models').factory('Address', ["$http", function ($http) {
    return {
        getList: function () {
            return $http.get('/api/user/address')
        },
        addOne: function (address) {
            return $http.post('/api/user/address',address)
        },
        update: function (address) {
            return $http.put('/api/user/address' + '/' + address._id, address)
        },
        'delete': function (id) {
            return $http.delete('/api/user/address/' + id)
        },
        range: function () {
            return $http.get('/api/orders/delivery/range')
        }
    }
}]);

angular.module('xw.models').factory('Coupon', ["$http", function ($http) {
    return {
        getCouponInfo: function (code) {
            return $http.get('/api/coupons/code/' + code);
        },
        exchangeCouponCode: function (code) {
            return $http.get('/api/user/coupon/code/' + code);
        }
    }
}]);

angular.module('xw.models').factory('Alipay', ["$http", function ($http) {
    return {
        notify: function (id, isCharge) {
            var url = isCharge ? '/api/orders/payment/alipay/notify/account'
                : '/api/orders/payment/alipay/mobile';
            return $http.post(url, {out_trade_no: id})
        }
    }
}]);

angular.module('xw.models').factory('Balance', ["$http", "Debug", function ($http, Debug) {
    return {
        balance: function () {
            return $http.get('/api/user/account')
        },
        chargeByCode: function (code) {
            return $http.post('/api/user/account/chargecode', {accountChargeCode: code});
        },
        chargeOnline: function (data) {
            return $http.post('/api/user/account/details', data);
        },
        balanceRecords: function () {
            return $http.get('/api/user/account/details?skip=0&limit=200')
                .catch(Debug.promiseErrFn('获取余额记录失败'))
        }
    }
}])

angular.module("xw.directives").run(["$templateCache", function($templateCache) {$templateCache.put("add-dish-bar.html","<div class=\"selection-cover\" ng-cloak ng-if=\"dish\" ng-click=\"hide()\"></div><div class=\"selections-container\" ng-if=\"dish\" ng-cloak><div class=\"block\"><h4 class=\"text-center\">{{dish.title.zh}}<span ng-click=\"hide()\" class=\"button close-button\"></span></h4><ul class=\"properties\" ng-if=\"dish.preferences.length\"><li ng-repeat=\"property in dish.preferences track by property._id\"><h5>{{property.name.zh}}</h5><ul class=\"selections\"><li ng-repeat=\"selection in property.foodMaterial track by selection._id\" ng-click=\"(!selection.outOfStock && selection.dish.isPublished) && (dish.curSelection[property.name.zh] = selection.dish)\" ng-class=\"{\'no-stock\': (selection.outOfStock || !selection.dish.isPublished), selected: dish.curSelection[property.name.zh] == selection.dish}\">{{selection.dish.title.zh}}</li></ul></li></ul><div class=\"counter-wrapper\"><i>份数</i><div class=\"counter text-center\"><span ng-click=\"dish.count>0 && (dish.count=dish.count-1)\" class=\"minus\">-</span> <span class=\"number\">{{dish.count}}</span> <span ng-click=\"dish.count=dish.count+1\" class=\"add\">+</span></div></div><div class=\"add-to-cart-button text-center\" ng-class=\"{invalid: dish.count == 0}\" ng-click=\"dish.count>0 && addToCart(dish)\">加入购物袋</div></div></div>");
$templateCache.put("address-list.html","<ul class=\"address-list\" capture-click=\"watchAddress($event)\"><li class=\"address-item\" ng-repeat=\"address in addresses\"><address cur=\"{{address.isDefault}}\" range=\"range\" out-address=\"address\" hide=\"hideAddress($index)\" leave=\"handler.leave[$index]\" save=\"handler.save[$index]\" valid=\"handler.valid[$index]\" delete-hook=\"remove($index)\"></address></li><li ng-if=\"range\" class=\"address-item\"><address range=\"range\" out-address=\"data.newAddress\" cur=\"{{!addresses.length}}\" hide=\"hideAddress(-2)\" leave=\"handler.leave.newAddress\" save=\"handler.save.newAddress\" valid=\"handler.valid.newAddress\"></address></li></ul>");
$templateCache.put("address-selection.html","<div class=\"address-selection\" flash-class=\"{exp: animateTrigger, duration: 400}\" ng-if=\"show\" ng-cloak><a href=\"/mobile/orderaddress?path={{path}}&dishId={{dishId}}\"><div ng-show=\"path != \'/eat\' && address\" class=\"address-tip\">配送至:{{address.street + address.address | limitTo: 18}}</div><div ng-show=\"noAddress\" class=\"no-address-tip\">您没有可以配送的地址,请先新建地址</div><div ng-show=\"path == \'/eat\' && (address && !address.isAvailableForEat)\" class=\"no-address-tip\">当前地址不在便当配送范围内</div><div ng-show=\"path == \'/eat\' && address.isAvailableForEat\" class=\"address-tip\">配送至:{{address.street + address.address | limitTo: 18}}</div></a></div>");
$templateCache.put("address.html","<div ng-if=\"css.isNewAddress && css.edit\" class=\"new-address-tip\">请填写有效的地址以便按时送达</div><div ng-hide=\"hide()\" class=\"address-component\" ng-class=\"{cur: css.cur || css.isNewAddress, edit: css.edit}\" ng-click=\"choose($event)\"><div class=\"address-block\" ng-if=\"!css.isNewAddress\"><span class=\"deliverable-tag\" ng-if=\"addr.isAvailableForEat\">便当可送达</span><div>{{addr.contactPerson}}</div><div class=\"cur-show\">{{addr.mobile | beautifyMobile}}</div><div class=\"cur-show\">{{addr.province + \' \' + addr.city + \' \' + addr.district}}</div><div>{{addr.street}}</div><div class=\"cur-show\">{{addr.address}}</div><div class=\"user-actions\"><span class=\"glyphicon glyphicon-pencil\"></span> <span ng-click=\"deleteAddress($event)\" class=\"glyphicon glyphicon-trash\"></span></div></div><div class=\"new-address-block\" ng-if=\"css.isNewAddress && !css.edit\">+ 新建收货地址</div><form ng-model-options=\"{ updateOn: \'default blur\', debounce: { \'default\': 500, \'blur\': 0 } }\" ng-class=\"{\'new-address\': css.isNewAddress}\" ng-if=\"css.edit\" name=\"form\"><div ng-init=\"initForm(form, addr)\" ng-class=\"{\'with-tag\': addr.isAvailableForEat}\"><input name=\"contactPerson\" type=\"text\" placeholder=\"收货人\" ng-model=\"addr.contactPerson\" auto-focus minlength=\"2\" required><err-tip form=\"form\" name=\"contactPerson\" error=\"required\">必填</err-tip><err-tip form=\"form\" name=\"contactPerson\" error=\"minlength\">联系人姓名至少2个字</err-tip></div><div><input name=\"mobile\" type=\"tel\" placeholder=\"手机号\" ng-model=\"addr.mobile\" pattern=\"^1\\d{10}$\" required><err-tip form=\"form\" name=\"mobile\" error=\"required\">必填</err-tip><err-tip form=\"form\" name=\"mobile\" error=\"pattern\">请填写11位手机号</err-tip></div><div ng-show=\"!css.showFakeInput\" class=\"selects\"><div class=\"select\"><select required name=\"province\" id=\"province\" ng-options=\"province for province in options()\" ng-change=\"trySelectUnique()\" ng-model=\"addr.province\"></select></div><div class=\"select\"><select required name=\"city\" id=\"city\" ng-options=\"city for city in options(addr.province)\" ng-model=\"addr.city\"></select></div><div class=\"select\"><select required name=\"district\" id=\"district\" ng-options=\"district for district in options(addr.province, addr.city)\" ng-model=\"addr.district\"></select></div></div><div ng-if=\"css.showFakeInput\"><input type=\"text\" placeholder=\"省、市、区\" ng-click=\"css.showFakeInput = false\"> <span class=\"err-tip\" ng-if=\"(form.province.$error.required||form.city.$error.required||form.district.$error.required) &&form.$submitted\">必填</span></div><div ng-click=\"showSearchAddress()\">{{addr.street}} <input type=\"hidden\" name=\"street\" placeholder=\"街道\" ng-model=\"addr.street\" required> <span ng-if=\"!addr.street\" class=\"placeholder\">街道</span><err-tip form=\"form\" name=\"street\" error=\"required\">必填</err-tip></div><div><input name=\"address\" type=\"text\" minlength=\"2\" placeholder=\"详细地址, 街道、楼层、门牌号\" required ng-model=\"addr.address\"><err-tip form=\"form\" name=\"address\" error=\"required\">必填</err-tip><err-tip form=\"form\" name=\"address\" error=\"minlength\">至少2个字符</err-tip></div></form><div class=\"search-address\" ng-if=\"css.edit && css.showSearchAddress\"><form id=\"address-form\"><div><input type=\"text\" placeholder=\"街道、小区、写字楼、地标名称\" id=\"address\" ng-model=\"data.street\" ng-model-options=\"{debounce: 400}\" auto-focus ng-change=\"searchAddress()\"></div></form><div class=\"find-address-tip\" ng-if=\"data.streetList.length\">您要找的是不是?</div><div class=\"no-address-tip\" ng-if=\"data.street && !data.streetList.length\"><h4>未能找到此地址</h4><p>建议输入街道、小区、写字楼、地标名称等</p></div><ul class=\"results\"><li ng-click=\"confirmStreet($event, street)\" ng-repeat=\"street in data.streetList\"><h4>{{street.address}}</h4><p>{{street.addressInfoBaidu}}</p></li></ul></div></div>");
$templateCache.put("confirm.html","<div class=\"xw-confirm\" ng-click><modal close=\"close\" show=\"showModal\" pre-close=\"preClose\"><div class=\"text\" ng-transclude></div><div class=\"button-group\"><span ng-click=\"cancel()\">取消</span><span ng-click=\"confirm()\">确定</span></div></modal></div>");
$templateCache.put("err-tip.html","<span class=\"err-tip\" ng-if=\"(form[name].$dirty||form.$submitted) && form[name].$error[error]\" ng-transclude></span>");
$templateCache.put("geetest-sms-button.html","<div class=\"geetest-sms-button-group\"><div id=\"geetestContainer\" ng-show=\"state==2\"></div><span class=\"geetest-sms-button\" ng-if=\"state <= 1\" ng-class=\"{invalid: state === 0}\" ng-click=\"state == 1 && showGeetest()\">获取验证码</span> <span class=\"geetest-sms-button invalid\" ng-if=\"state == 3\">发送成功 {{remains}}</span> <span ng-click=\"state == 5 && showGeetest()\" class=\"geetest-sms-button\" ng-class=\"{invalid: state == 4}\" ng-if=\"state > 3\">重新获取</span></div>");
$templateCache.put("menu-nav.html","<nav class=\"menu-nav\" ng-class=\"{\'empty\': !localBag.length}\"><div ng-class=\"{active: path == \'/mobile/me\'}\"><a href=\"/mobile/me\"><span>帐号</span></a></div><div ng-class=\"{active: path == \'/eat\'}\"><a href=\"/mobile/#/eat\"><span>便当</span></a></div><div ng-class=\"{active: path == \'/cook\' || !path}\"><a href=\"/mobile/#/cook\"><span>食材包</span></a></div><div class=\"go-to-cart\" ng-class=\"{invalid: !isAddressOk()}\" ng-if=\"localBag.length\" flash-class=\"{exp: localBag.length, duration: 400}\" ng-click=\"isAddressOk({isClick: true}) && goToCart()\"><div class=\"icon bag-icon\"><i class=\"number\" ng-bind=\"localBag.length\"></i></div><span class=\"price\" ng-bind=\"localBag.price || 0 | number: 1\"></span></div></nav>");
$templateCache.put("modal.html","<div class=\"xw-modal-container\" ng-show=\"css.show\"><div class=\"xw-modal-backdrop\" ng-click=\"close()\"></div><div class=\"xw-modal-content\" ng-transclude></div></div>");
$templateCache.put("shopping-progress-bar.html","<div class=\"shopping-progress-bar\"><div class=\"states\"><span ng-class=\"{cur: state == \'state1\'}\" class=\"state1\">筛选购物袋</span> <span ng-class=\"{cur: state == \'state2\'}\" class=\"state2\">确认送货地址</span> <span ng-class=\"{cur: state == \'state3\'}\" class=\"state3\">支付</span></div><div class=\"state-bar-container\"><div class=\"indicator\" ng-class=\"state\"></div></div></div>");
$templateCache.put("sms-button.html","<div class=\"sms-button-group\"><span class=\"sms-button\" ng-if=\"state <= 1\" ng-class=\"{invalid: state === 0}\" ng-click=\"state == 1 && getSmsCode()\">获取验证码</span> <span class=\"sms-button invalid\" ng-if=\"state == 2\">{{remains}}秒后重新获取</span> <span ng-click=\"state == 4 && getSmsCode()\" class=\"sms-button\" ng-class=\"{invalid: state == 3}\" ng-if=\"state > 2\">重新获取</span></div>");
$templateCache.put("thanksgiving.html","<div class=\"thanksgiving\"><modal default=\"show\" ng-click=\"close()\" close=\"close\"><div class=\"thanksgiving-main\">全周好品味，新味感谢您!</div></modal></div>");}]);
angular.module('xw.weixin').factory('Weixin',["$http", "Debug", function ($http, Debug) {

    var defaults = {
        //weixin js config
        wx: {
            appId: 'wx37a1323e488cef84',
            jsApiList: ['getLocation', 'onMenuShareTimeline', 'onMenuShareAppMessage']
        },

        // xinwei location, gcj02
        location: {
            longitude: 121.460625,
            latitude: 31.189426
        },

        ak: 'xnKgWtGYXf4gkLgreox7xpjI',

        oauthUrl: '/api/orders/payment/weixinpay/oauthcode?orderid='
    };

    return {
        isWeixin: /MicroMessenger/i.test(navigator.userAgent),

        oauthUrl: defaults.oauthUrl,

        readyState: false,

        // 微信的事后ready似乎不好用，连个详细的文档都没有，还是自己实现靠谱。
        ready: function (cb) {
            if (this.readyState) {
                cb();
            } else this.ready.cb = cb;
        },
        /**
         * set jsapi config
         * @param setting
         */
        config: function (setting) {
            var that = this;
            var _setting = angular.copy(defaults.wx);
            _setting.timestamp = setting.timestamp;
            _setting.nonceStr = setting.nonceStr; // todo: be careful to different backend returned data.
            _setting.signature = setting.signature;

            wx.config(_setting);

            wx.ready(function() {
                that.ready.cb && that.ready.cb();
                that.readyState = true;
            });
        },
        /**
         * @param success - success callback with {lat: . lng: .} arguemnt
         * @param fail - fail callback with unknown arguemnt
         */
        getLocation: function(success, fail) {
            var setting = {type: 'gcj02'};
            success && (setting.success = success);
            fail && (setting.fail = fail);
            wx.getLocation(setting);
        },

        /**
         * 同微信分享朋友圈接口http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html#.E8.8E.B7.E5.8F.96.E2.80.9C.E5.88.86.E4.BA.AB.E5.88.B0.E6.9C.8B.E5.8F.8B.E5.9C.88.E2.80.9D.E6.8C.89.E9.92.AE.E7.82.B9.E5.87.BB.E7.8A.B6.E6.80.81.E5.8F.8A.E8.87.AA.E5.AE.9A.E4.B9.89.E5.88.86.E4.BA.AB.E5.86.85.E5.AE.B9.E6.8E.A5.E5.8F.A3
         * @param settings
         */
        shareTimeline: function (settings) {
            wx.onMenuShareTimeline(settings);
        },

        shareAppMessage: function (settings) {
            wx.onMenuShareAppMessage(settings);
        },

        showOptionMenu: function () {
            wx.showOptionMenu();
        },

        hideOptionMenu: function () {
            wx.hideOptionMenu();
        },

        /**
         * get location with baidu api
         * @param lat - gcj02
         * @param lng
         * @return promise will resolved with $http res.
         */
        getLocationName: function (lat, lng) {
            var mapUrl = 'http://api.map.baidu.com/geocoder/v2/?output=json&pois=1&coordtype=gcj02ll&callback=JSON_CALLBACK'
            return $http.jsonp(mapUrl, {
                params: {
                    ak: defaults.ak,
                    location: lat + ',' + lng
                }
            })
        },
        /**
         * 获取jsconfig 参数
         * @param url
         * @returns {HttpPromise}
         */
        getJsconfig: function () {
            return $http.post('/api/orders/payment/weixinpay/config', {
                url: location.href.substr(0, location.href.length - location.hash.length)
            });
        }
    }
}]);
angular.module('xw.services').factory('Alert', function () {
    var codeMsg = {
        1110: '手机号码或密码错误',
        1111: '手机号码或密码错误',
        1112: '该用户已存在',
        1113: '手机号码或密码错误',

        2110: '手机号码错误',

        3110: '短信码错误',
        3111: '短信码已过期',
        3112: '无效的短信码',
        3113: '错误的短信码类型',
        3114: '短信码验证次数过多, 请重新接收短信码',
        3115: '发送失败, 请稍后重试',
        3116: '短信码发送次数达到当日最大次数',

        4110: '库存不足',

        5110: '尚未到充值码使用时间',
        5111: '优惠码/优惠券已过期',
        5112: '优惠码/优惠券已被使用',
        5113: '超出优惠码/优惠券最大使用次数',
        5121: '只能兑换一次朋友的邀请码(无论是否是同一个朋友), 您已经兑换过一次了'
    };

    return {
        show: function (code, def) {
            var msg = codeMsg[code];
            if (msg) alert(msg);
            else if (def) alert(def);
        },
        message: function (code) {
            return codeMsg[code] || '';
        }
    }
})

angular.module('xw.services').provider('Debug', function () {
    var that = this;
    that.debugKey = 'debug';

    this.$get = ["Utils", function (Utils) {
        var isDebug = new RegExp('\\b' + that.debugKey + '\\b');
        var fakeWarehouse = '';
        var searches = Utils.searches(location.search);
        isDebug = isDebug.test(location.search) || !!sessionStorage.getItem('debug');

        if (isDebug && !sessionStorage.getItem('debug')) {
            sessionStorage.setItem('debug', 'true');
        }
        if (isDebug) {
            if ('fakewarehouse' in searches) {
                fakeWarehouse = searches.fakewarehouse;
            }
        }

        var ret = {
            //默认根据查询参数中到是否出现debug参数来判断
            isDebug: isDebug,
            alert: function (val) {
                if (this.isDebug) {
                    console.log(val); // todo:怎么判断log是否有效?如果有效,似乎就没有多大必要调用alert了.
                    val = Object.prototype.toString.call(val) == "[object Object]"
                        ? JSON.stringify(val) : val;
                    alert(val);
                }
            },
            assert: function (express, sval) {
                if (this.isDebug) {
                    !express && alert(sval);
                }
            },
            promiseErrFn: function (msg) {
                return function(res) {
                    ret.alert(msg);
                    ret.alert(res);
                }
            },
            fakeWarehouse: fakeWarehouse
        };
        
        return ret
    }]
});
angular.module('xw.services').factory('Map', ["$http", "Debug", function ($http, Debug) {
    // 如果有必要修改则需要改成provider
    var topDistance = {
        xinweioffice: 6000,
        caohejing1: 1560
    };

    var map = {
        bentoNoReach: 999999,

        topDistance: {
            xinweioffice: 6000,
            caohejing1: 1560
        },

        suggestion: function (query, region) {
            return $http.get('/mobile/placesuggestion?query=' + query + '&region=' + region)
        },

        search: function (query, region) {
            return $http.post('/api/user/address/suggestion', {query:query, region:region})
        },

        // 坐标转化
        // https://github.com/JackZhouCn/JZLocationConverter/
        gcj02ToBd09: function (location) {
            var y = location.lat;
            var x = location.lng;
            var z = Math.sqrt(x * x + y * y) + 0.00002 * Math.sin(y * Math.PI);
            var theta = Math.atan2(y, x) - 0.000003 * Math.cos(x * Math.PI);

            return {
                lng: z * Math.cos(theta) + 0.0065,
                lat: z * Math.sin(theta) + 0.006
            }
        },

        // 在调用百度suggestion api后会用到
        bd09ToGcj02: function (location) {
            var y = location.lat - 0.006;
            var x = location.lng - 0.0065;
            var z = Math.sqrt(x * x + y * y) - 0.00002 * Math.sin(y * Math.PI);
            var theta = Math.atan2(y, x) - 0.000003 * Math.cos(x * Math.PI);

            return {
                lng: z * Math.cos(theta),
                lat: z * Math.sin(theta)
            }
        },

        //根据坐标计算直线距离
        //https://github.com/googollee/eviltransform
        lineDistance: function (latA, lngA, latB, lngB) {
            var earthR = 6371000;
            var x = Math.cos(latA * Math.PI / 180) * Math.cos(latB * Math.PI / 180) * Math.cos((lngA - lngB) * Math.PI / 180);
            var y = Math.sin(latA * Math.PI / 180) * Math.sin(latB * Math.PI / 180);
            var s = x + y;
            if (s > 1) {
                s = 1;
            }
            if (s < -1) {
                s = -1;
            }
            var alpha = Math.acos(s);
            return alpha * earthR;
        },

        lineDistance2CHJ: function (lat, lng) {
            var CHJ = this.warehouseCoords.caohejing1;
            return this.lineDistance(lat, lng, CHJ.lat, CHJ.lng)
        },

        fixZero: function (d, lat, lng) {
            if (d !== 0) return d;
            var lineD = this.lineDistance(lat, lng, 31.189426, 121.460625);
            return lineD > 1500 ? 999999 : d;
        },

        /**
         * 对百度地图routematrix api的后端包装,此处原样返回百度的数据
         * @param lat gcj02坐标 | [sval, obj, ..]
         * @param lng
         * @param warehouse
         * @returns {HttpPromise}
         */
        walkingDistance: function (lat, lng, warehouse) {
            var args;
            warehouse = warehouse || '';
            if (Array.isArray(arguments[0])) {
                args = arguments[0];
                warehouse = lng;
            } else {
                args = [{lat: lat, lng: lng}];
            }

            var sval = '';
            args.forEach(function (arg, i) {
                if (i >= 5) return; //百度限制
                var prefix = i == 0 ? '' : '|';
                if (typeof arg == 'string') {
                    sval += prefix + arg;
                } else {
                    sval += prefix + arg.lat + ',' + arg.lng;
                }
            });

            return $http.get('/mobile/distance?destinations=' +
                encodeURIComponent(sval) + '&warehouse=' + warehouse)
            .then(function (res) {
                    var results = res.data.result.elements;
                    var ret = [];
                    var len = results.length / 2;
                    var pair;
                    for (var i = 0; i < len; i++) {
                        results[i].warehouse = 'xinweioffice';
                        results[len + i].warehouse = 'caohejing1';
                        pair = [results[i], results[len + i]];
                        pair = angular.sort(pair, function (a, b) {
                            return (a.distance.value - topDistance.xinweioffice) -
                                (b.distance.value - topDistance.caohejing1)
                        });
                        ret.push(pair);
                    }
                    return ret;
                })
            .catch(function () {
                    console.log('get distance error');
                    return []
                })
        },

        /**
         * 计算距离仓库的距离
         * @param lat gcj02
         * @param lng gcj02
         * @param warehouse - 'CHJ'
         * @returns {*|Promise.<T>}
         */
        distance: function (lat, lng, warehouse) {
            return this.walkingDistance(lat, lng, warehouse).then(function (res) {
                var d = res[0][0].distance.value;
                d = map.fixZero(d, lat, lng);
                var top = topDistance[res[0][0].warehouse];
                return {
                    distance: d,
                    // 百度有时候返回的是null, 此时就当作1000公里
                    isInRange: (d === null ? 999999 : d) <= top,
                    warehouse: res[0][0].warehouse
                }
            }).catch(function (res) {
                Debug.alert('获取步行距离失败');
                Debug.alert(res);
            })
        },

        distances: function (dests, warehouse) {
            dests = Array.isArray(dests) ? dests : [dests];
            return this.walkingDistance(dests, warehouse).then(function (res) {
                return res.map(function (el, i) {
                    var d = map.fixZero(el[0].distance.value, dests[i].lat, dests[i].lng);
                    var top = topDistance[el[0].warehouse];
                    return {
                        distance: d,
                        isInRange: (d === null ? 999999 : d) <= top,
                        warehouse: el[0].warehouse
                    }
                })
            })
        },

        nearestWarehouse: function (lat, lng) {
            var that = this;
            var topDistance2HQ = topDistance['xinweioffice'];
            var topDistance2CHJ = topDistance['caohejing1'];
            var warehouses = angular.sort(['xinweioffice', 'caohejing1'].map(function (name) {
                var warehouse = that.warehouseCoords[name];
                return {
                    name: name,
                    distance: that.lineDistance(lat, lng, warehouse.lat, warehouse.lng)
                }
            }), function (a, b) {
                return (a.distance - topDistance2HQ + 1100) - (b.distance - topDistance2CHJ)
            });

            if (Debug.fakeWarehouse) {return Debug.fakeWarehouse}
            return warehouses[0].name;

        },

        warehouseCoords: {
            xinweioffice: {
                lat: 31.189426,
                lng: 121.460625
            },
            caohejing1: {
                lat: 31.169250,
                lng: 121.398949
            }
        }
    };

    return map;
}]);

angular.module('xw.services').factory('ScopeDecorator', ["$location", function ($location) {
    return {
        common: function (scope) {
            if (!scope) return;
            scope.back = function () {
                if (history.length > 1) history.back();
                else location.href = '/mobile/'
            }
        },
        nav: function (scope) {
            if (!scope) return;
            scope.$on('$locationChangeStart', function () {
                scope.path = $location.path();
            });
        }
    }
}]);
angular.module('xw.services').factory('Utils', ["$localStorage", function ($localStorage) {
    return {
        // todo: base64编码后的字符包括大小写字母各26各,以及数字,以及 + / = 这3个字符
        // 而 +(这个...) 和 / 在url中会被转义,因此需要再做替换,这里替换 + 为 - , / 替换为 _
        utf2b64: function (str) {
            return btoa(unescape(encodeURIComponent(str))).replace(/\+/g, '-').replace(/\//g, '_');
        },
        b642utf: function (str) {
            return decodeURIComponent(escape(window.atob(str.replace(/-/g, '+').replace(/_/g, '/'))));
        },

        // 两个购物车item是否是同一个,购物车item结构为:{dish:dish, number:, subDish:[]}
        isSameItemInCart: function (item1, item2) {
            return item1.dish._id == item2.dish._id && //主dish是否相同
                item1.subDish.every(function (a) { //子dish是否全部相同
                    return item2.subDish.some(function (b) {
                        return a.dish._id == b.dish._id
                    })
                }) && item1.subDish.length == item2.subDish.length;
        },

        // 合并本地购物车和线上购物车, 将数据全部合并到本地购物车.
        // local dish的数量(非dish.number)只会增加不会减少
        mergeCarts: function (local, server) {
            if (!local || !local.length) return server;
            var that = this;
            for (var i = 0; i < server.length; i++) {
                var notInLocal = local.every(function (lDish) {
                    return !that.isSameItemInCart(lDish, server[i])
                });
                if (notInLocal)
                   local.push(server[i]);
            }
            return local;
        },

        /**
         * 从/api/dishes获取到dish列表中抽取上线且有货的子属性菜品
         * @param dishList [{_id:., outOfStock: ., ..}]
         * @param type - 'main', or 'preference'
         * @returns [24位id, ..] 最小化localStorage的存储成本.(也许取末几位就可以)
         */
        getStockId: function (dishList, type) {
            var idStockMap = {};
            if (type == 'preference') {
                dishList.forEach(function (dish) {
                    dish.preferences.forEach(function (p) {
                        p.foodMaterial.forEach(function (f) {
                            if (!idStockMap[f.dish._id] && f.dish.isPublished) {
                                idStockMap[f.dish._id] = true;
                            }
                        })
                    })
                });
            } else {
                dishList.forEach(function (dish) {
                    if (!idStockMap[dish._id] && !dish.outOfStock) {
                        idStockMap[dish._id] = true;
                    }
                })
            }

            return Object.keys(idStockMap);
        },

        /**
         * localStorage实在是太大了,去掉多余的信息,只保留必要的信息.这些必要掉信息需要手动清除
         */
        cleanLocalStorage: function () {
            var remain = [ 'promotion', 'access_token', 'selectedAddress'];
            Object.keys($localStorage).forEach(function (key) {
                if (remain.indexOf(key) == -1 && key[0] != '$') {
                    delete $localStorage[key];
                }
            })
        },

        /**
         * 接收'?a=1&b=&c'这样的查询字符串,输出:{a:1, b:'', c: ''}
         * @param search - 如果没有则使用location.search
         * @returns {*}
         */
        searches: function (search) {
            search = search || location.search;
            return search.slice(1).split('&').reduce(function (obj, cur) {
                if (cur) {
                    cur = cur.split('=');
                    obj[cur[0]] = decodeURIComponent(cur[1] || '');
                }
                return obj;
            }, {});
        },

        /**
         * 确认两个地址是否相同,比如上海和上海市应该是相同的
         * @param addr1
         * @param addr2
         * @returns {boolean}
         */
        addressEqual: function (addr1, addr2) {
            addr1 = addr1 || '';
            addr2 = addr2 || '';
            if (!addr1 || !addr2) return false;
            return !addr1.indexOf(addr2) || !addr2.indexOf(addr1)
        },

        /**
         * 将老地址中的`徐汇`之类的转换成新地址的`徐汇区`
         * @param address - {province:.., city: .., district: ..}
         * @param ref - [从服务端拉取的地址数组, /api/../range]
         */
        regularizeAddress: function (address, ref) {
            var cities, districts;
            var equal = this.addressEqual;
            ref.some(function (state) {
                if (equal(address.province, state.state)) {
                    address.province = state.state;
                    cities = state.cities;
                    return true;
                }
            });

            cities && cities.some(function (city) {
                if (equal(address.city, city.city)) {
                    address.city = city.city;
                    districts = city.areas;
                    return true;
                }
            });

            districts && districts.some(function (district) {
                if (equal(address.district, district)) {
                    address.district = district;
                    return true;
                }
            });

            return address
        },

        /**
         * 基于服务端传回的配送范围数据,以空,或省,或市为参数来查询相应的子地区列表
         * @example call('浙江') - return ['杭州市', '宁波市', ..]; call(), - ret[全国省]
         * @param addresses - 服务端范围数据 /api/../range
         * @param province
         * @param city
         * @returns []
         */
        addressOptions: function (addresses, province, city) {
            var len = arguments.length;

            if (len == 1) {
                return addresses.map(function (el) {return el.state})

            } else if (len == 2) {
                if (!province) return;
                //这里可以将结果缓存起来, 以节省len == 2时(以及以后可能相同)的多余计算
                return addresses.filter(function (el) {
                    return el.state == province
                })[0].cities.map(function (el) {
                        return el.city;
                    })

            } else if (len == 3) {
                if (!city) return;
                var cities = addresses.filter(function(el) {
                    return el.state == province
                })[0].cities.filter(function (el) {
                        return el.city == city
                    })
                if (cities && cities.length) {
                    return cities[0].areas
                }
            }
        },

        stockOfDish: function (dish, warehouse) {
            return dish.stockWarehouse.some(function (item) {
                return item.warehouse == warehouse && item.stock > 0;
            })
        },

        /**
         * 例如购物中的item {dish: {}, subDish: [..]}
         * @param item
         * @param warehouse
         */
        stockOfItem: function (item, warehouse) {
            var stockOfDish = this.stockOfDish;
            return stockOfDish(item.dish, warehouse) && !!item.subDish && item.subDish.every(function (el) {
                    return stockOfDish(el.dish, warehouse)
                })
        }
    }
}]);
angular.module('xw.directives').directive('addDishBar', ["Debug", "User", "$localStorage", "$filter", "Utils", function (Debug, User, $localStorage, $filter, Utils) {
    return {
        scope: {
            dish: '=',
            user: '=',
            localBag: '='
        },
        templateUrl: 'add-dish-bar.html',
        link : function ($scope) {
            var storage = $scope.storage = $localStorage;
            var localBag = $scope.localBag = [];

            var unwatcher = $scope.$watch('user', function (user) {
                if (user) {
                    unwatcher();

                    $scope.localBag = localBag = Utils.mergeCarts(localBag
                        , user.shoppingCart.filter(function (item) {
                            return !!item.dish
                        }));
                    $scope.totalPrice();
                }
            });

            $scope.$watch('dish', function (dish) {
                if (dish) {
                    var curSelection = {};
                    $scope.dish.preferences.forEach(function (property) {
                        property.foodMaterial.forEach(function (el) {
                            el.outOfStock = !(el.dish.stockWarehouseObj[storage.warehouse] > 0 || el.dish.cookingType == 'ready to cook')
                        })
                        property.foodMaterial.some(function (el) {
                            if (!el.outOfStock) {
                                curSelection[property.name.zh] = el.dish;
                                return true;
                            } else return false;
                        })
                    });
                    // dish.curSelection存储多属性下的各选中dish,
                    // 是一个以各属性名为key, 属性下的某个有货dish为value对象
                    // (尽管一个属性下有可能多个有货dish,但当前选中但只有一个dish)
                    $scope.dish.curSelection = curSelection;
                }
            });

            /**
             * @param dish 此dish同$scope.dish
             */
            $scope.addToCart = function (dish) {
                var selection = dish.curSelection;
                var newEntry = {
                    dish: dish,
                    number: dish.count,
                    subDish: Object.keys(selection).map(function (key) {
                        return {
                            dish: selection[key],
                            number: dish.count
                        };
                    })
                };

                // 存在与cart中的与dish的id相同的dish wrapper
                // - {dish: dish, number:number, subDish: []}
                var entry;

                localBag.some(function (item) {
                    if (Utils.isSameItemInCart(item, newEntry)) {
                        entry = item;
                        entry.number += newEntry.number;
                        entry.subDish.forEach(function (sDish) {
                            sDish.number = entry.number;
                        });
                        return true;
                    }
                });

                if (!entry) {
                    localBag.push(newEntry);
                }

                dish.count = 0;

                $scope.hide();

                User.postCart(localBag.filter(function(item){return !!item.dish}).map(postDishFilter));

                $scope.totalPrice();
            };

            var postDishFilter = $filter('postDish');

            $scope.totalPrice = function () {
                var p = localBag.filter(function(item){return !!item.dish}).reduce(function price(total, cur) {
                    total += cur.dish.priceOriginal * cur.number;
                    if (cur.subDish) {
                        total += cur.subDish.reduce(price, 0)
                    }
                    return total;
                }, 0);
                return localBag.price = p;
            };

            $scope.totalPrice();

            $scope.hide = function () {
                $scope.dish = null;
            };

        }
    }
}])
angular.module('xw.directives').directive('addressList', ["$q", "Alert", function ($q, Alert) {
    return {
        restrict: 'E',
        scope: {
            // 外部传入的数据
            addresses: '=', // 待编辑的地址, 如果为空, 则表示是新地址
            range: '=', // 省市区数据
            watchAddress: '=save',
            editing: '=',
            hideOthersWhenEdit: '@'
        },
        templateUrl: 'address-list.html',
        link: function ($scope) {
            var data = $scope.data = {
                newAddress: {}
            };

            // 引用地址指令的内部函数
            var handler = $scope.handler = {
                save: [],
                leave: [],
                valid: []
            };

            $scope.hideAddress = function (idx) {
                if ($scope.hideOthersWhenEdit == 'true' && $scope.addresses) {
                    var editIdx = -1;

                    if ($scope.data.newAddress.edit) {
                        editIdx = -2;
                    }
                    editIdx == -1 && $scope.addresses.some(function (addr, i) {
                        if (addr.edit) {
                            editIdx = i;
                            return true;
                        }
                    });
                    return editIdx != -1 && idx != editIdx;
                }
            };

            $scope.editing = function () {
                if (!$scope.addresses) return false;
                return !!data.newAddress.edit
                    || $scope.addresses.some(function (addr) {
                        return addr.edit;
                    })
            };

            $scope.remove = function (idx) {
                $scope.addresses.splice(idx, 1);
                handler.save.splice(idx, 1);
                handler.leave.splice(idx, 1);
                handler.valid.splice(idx, 1);
            };

            // 此处监听发生在cur地址指令之外的click.
            // (如果是在cur指令上发生的click,则交给cur指令自己处理,此处忽略即可)
            // 这些click表明可能需要保存cur地址指令的数据(如果cur地址指令正处在edit阶段)
            // 并且需要切换地址指令们的cur状态
            $scope.watchAddress = function (event) {
                var target = event.target;
                var parent = target, cur;
                // 是否是从address指令上产生的click事件,如果是则定位其序号.
                do {
                    if (parent.className.indexOf('address-item') != -1) {
                        var addressNodes = parent.parentElement.children;
                        for (var i = 0, len = addressNodes.length; i < len; i++) {
                            if (addressNodes[i] == parent) {
                                cur = i;
                                break;
                            }
                        }
                    }
                } while (parent = parent.parentElement);

                // 从addresses数据中找出正在处在编辑状态的地址序号
                var editIdx = -1;
                var curIdx = -1;
                $scope.addresses.forEach(function (address, i) {
                    if (address.edit) {
                        editIdx = i;
                    }
                    if (address.cur) {
                        curIdx = i;
                    }
                });

                // 忽略从cur指令上产生的click事件.
                if (cur == curIdx ||
                    (cur == $scope.addresses.length && data.newAddress.cur))
                    return;

                // 保存
                var promise;
                if (editIdx != -1) {
                    if (handler.valid[editIdx]()) {
                        promise = handler.save[editIdx]()
                    } else {
                        // 阻止离开当前地址指令,并阻止其他地址指令响应click事件.
                        return event.stopPropagation();
                    }
                } else if (data.newAddress.edit) {
                    if (handler.valid.newAddress()) {
                        promise = handler.save.newAddress().then(function (address) {
                            $scope.addresses.push(address);
                            data.newAddress = {};
                            return address;
                        }).catch(function (res) {
                            Alert.show(res.data.validationStatus, '保存失败');
                        });
                    } else {
                        return event.stopPropagation();
                    }
                }

                // 离开
                if (curIdx != -1) {
                    handler.leave[curIdx]();
                    if (editIdx == -1)
                        promise = $q.resolve($scope.addresses[curIdx]);
                } else if (data.newAddress.cur) {
                    handler.leave.newAddress();
                }

                // 如果是保存那这就是promise,否则不是.
                return promise;
            };
        }
    }
}]);

angular.module('xw.directives').directive('addressSelection', function () {
    return {
        restrict: 'E',
        scope: {
            animateTrigger: '=',
            show: '=',
            address: '=',
            noAddress: '=',
            dishId: '@',
            path: '@'
        },
        templateUrl: 'address-selection.html'
    }
});
angular.module('xw.directives').directive('address', ["$timeout", "$location", "Address", "Utils", "$q", "Weixin", "Map", "Alert", function ($timeout, $location, Address, Utils, $q, Weixin, Map, Alert) {
    return {
        restrict: 'E',
        scope: {
            // 外部传入的数据
            outAddress: '=', // 待编辑的地址, 如果为空, 则表示是新地址
            range: '=', // 省市区数据

            // 供外部调用的方法
            save: '=',
            leave: '=',
            valid: '=',

            // 需要调用的外部方法
            deleteHook: '&', // 当删掉当前地址后给予外部的回调接口
            hide: '&', // 接收隐藏条件

            // 是否为当前状态地址的默认参数.
            cur: '@'
        },
        templateUrl: 'address.html',
        link: function ($scope) {
            var addr;

            var css = $scope.css = {
                edit: false,
                cur: $scope.cur == "true",
                showSearchAddress: false,
                form: null,
                locating: false,
                isWeixin: Weixin.isWeixin,
                isNewAddress: Object.keys($scope.outAddress).length < 2
            };

            var data = $scope.data = {
                street: ''
            };

            // 如果没有一个外部传入的地址,那么这是一个新地址
            // <2 for angular
            if (css.isNewAddress) {
                addr = $scope.addr = {sortOrder: 0};
                if (css.cur) {
                    css.edit = true;
                }
            } else {
                addr = $scope.addr = Utils.regularizeAddress(
                    angular.copy($scope.outAddress), $scope.range);
            }

            $scope.outAddress.cur = css.cur;
            $scope.outAddress.edit = !!css.edit;

            $scope.options = Utils.addressOptions.bind(null, $scope.range);

            $scope.$on('$locationChangeStart', function () {
                if (!css.edit) return;
                var path = $location.path();
                css.showSearchAddress = path == '/search-address'
            });

            $scope.choose = function () {
                if (css.cur) {
                    css.edit = true;
                    $scope.outAddress.edit = true;
                } else {
                    css.cur = true;
                    // 如果这是一个新地址
                    if (css.isNewAddress) {
                        css.edit = true;
                        $scope.outAddress.edit = true;
                    }
                }
                $scope.outAddress.cur = true;
            };

            $scope.trySelectUnique = function () {
                var cities = $scope.options(addr.province);
                if (cities.length == 1) {
                    addr.city = cities[0];
                }
            };

            $scope.deleteAddress = function (event) {
                event.stopPropagation();

                Address.delete(addr._id);
                if ($scope.deleteHook) {
                    $scope.deleteHook();
                }
            };

            $scope.showSearchAddress = function () {
                data.street = addr.street;
                $location.path('search-address');
                $scope.data.streetList && ($scope.data.streetList.length = 0);
                $scope.searchAddress();
            };

            $scope.searchAddress = function () {
                if (data.street) {
                    Map.search(data.street, addr.city || '全国')
                        .then(function (res) {
                            $scope.data.streetList = res.data;
                        });
                }
            };

            $scope.confirmStreet = function (event, street) {
                event.stopPropagation();

                $location.path('');
                if (!street) return;

                addr.street = street.address;
                addr.geoLatitude = street.lat;
                addr.geoLongitude = street.lng;
            };

            $scope.save = function () {
                if (css.form.$invalid) return $q.resolve(false);

                css.edit = css.cur = false;
                $scope.outAddress.edit = $scope.outAddress.cur = false;

                addr.isDefault = true;
                return Address[!css.isNewAddress ? 'update' : 'addOne'](addr)
                .then(function (res) {
                        addr = $scope.addr = res.data;
                        $scope.outAddress.cur = css.cur = true;
                        angular.extend($scope.outAddress, res.data);
                        return res.data;
                    });
            };

            $scope.leave = function () {
                $scope.outAddress.cur = css.cur = false;
            };

            // 会设置form$submitted为true
            $scope.valid = function () {
                css.form.$submitted = true;
                return !css.form.$invalid;
            };

            $scope.initForm = function (form) {
                css.form = form;
                css.showFakeInput = !addr.province;
            };

            // todo:必须要先在外部调用Weixin.config,或许内部也用一个后备?
            $scope.locate = function (event) {
                event.stopPropagation();

                css.locating = true;

                Weixin.getLocation(function (res) {

                    //console.log("weixinGeo:", res);

                    Weixin.getLocationName(res.latitude, res.longitude).then(function (data) {

                        //console.log("baiduGeo:", data.data);

                        var result = data.data.result;
                        result = angular.pick(result.addressComponent, 'province', 'city', 'district', 'street', 'street_number');
                        var location = Map.gcj02ToBd09({
                            lat: res.latitude,
                            lng: res.longitude
                        });
                        result.geoLatitude = location.lat;
                        result.geoLongitude = location.lng;

                        Utils.regularizeAddress(result, $scope.range);

                        angular.extend(addr, result);

                    }).catch(angular.noop).then(function () {
                        css.locating = false; // like finally
                    });
                }, function () {
                    css.locating = false;
                });
            };

        }
    };
}]);

angular.module('xw.directives').directive('autoFocus', function () {
    return {
        restrict: 'A',
        link: function (scope, el) {
            setTimeout(function () {
                el[0].focus();
            }, 100);
        }
    }
});
angular.module('xw.directives').directive('backButton', function () {
    return {
        template: '<div class="back-icon" ng-click="back()"></div>',
        link: function ($scope) {
            // 有些路径需要直接调用 navigator.back(), 有些路径
            $scope.back = function () {
                if (history.length <= 1) location.href = '/mobile/';
                history.back();
            }
        }
    }
})
angular.module('xw.directives').directive('captureClick',["$parse", "$rootScope", function($parse, $rootScope) {
    /**
     * 监听capture阶段的事件
     * ng-click不支持capture阶段的事件监听,因为和jquery兼容的jqlite不支持.(jquery不支持是因为ie9以下只有冒泡)
     * 基于以下修改:https://github.com/angular/angular.js/blob/master/src/ng/directive/ngEventDirs.js
     */
    return {
        restrict: 'A',
        compile: function($element, attr) {
            var fn = $parse(attr.captureClick, /* interceptorFn */ null, /* expensiveChecks */ true);
            return function ngEventHandler(scope, element) {
                element[0].addEventListener('click', function (event) {
                    var callback = function() {
                        fn(scope, {$event:event});
                    };
                    if ($rootScope.$$phase) {
                        scope.$evalAsync(callback);
                    } else {
                        scope.$apply(callback);
                    }
                }, true);
            };
        }
    };
}])
angular.module('xw.directives').directive('confirm', ["$q", function ($q) {
    return {
        restrict: 'E',
        transclude: true,
        scope: {
            show: "="
        },
        templateUrl: 'confirm.html',
        link: function (scope) {
            var deferred;
            scope.show = function () {
                deferred = $q.defer();
                scope.showModal();
                return deferred.promise;
            };

            scope.confirm = function () {
                scope.close(true);
                deferred.resolve(true);
            };

            scope.cancel = function () {
                scope.close();
            };

            scope.preClose = function () {
                deferred.resolve(false);
            }
        }
    }
}]);
angular.module('xw.directives').directive('couponCode', ["Coupon", "$q", function (Coupon, $q) {
    return {
        restrict: 'A',
        scope: {
            couponPrice: '=couponCode',
            couponCodeType: '='
        },
        require: '?ngModel',
        link: function (scope, el, attrs, ngModel) {
            if (!ngModel) return;

            ngModel.$asyncValidators.couponCode = function (mValue, vValue) {
                var value = mValue || vValue;

                if (!value) return $q.resolve(1);

                value = value.length == 8 ? 'zz' + value : value;

                return Coupon.getCouponInfo(value).then(function (res) {
                    var coupon = res.data;
                    var now = new Date(res.headers('date'));
                    var startDate = new Date(coupon.startDate);
                    var endDate = new Date(coupon.endDate);
                    // todo: check price limit
                    if (startDate <= now && now <= endDate) {
                        if (coupon.couponType == "promocodepercentage") {
                            scope.couponCodeType = 'promocodepercentage'
                        }
                        scope.couponPrice = coupon.price;
                        // todo: 价格限制
                    } else {
                        return $q.reject('未在可使用期限内');
                    }
                })
            }
        }
    }
}]);
angular.module('xw.directives').directive('errTip', function () {
    return {
        scope: {
            form: '=',
            error: '@',
            name: '@'
        },
        transclude: true,
        templateUrl: 'err-tip.html'
    }
})
angular.module('xw.directives').directive('flashClass', function () {
    return {
        restrict: 'A',
        scope: {options: '=flashClass'},
        require: '?ngModel',
        link: function (scope, el) {
            var time = scope.options.duration || 700;
            var className = scope.options.className || 'flash';
            scope.$watch('options.exp', function (newVal, oldVal) {
                if (((newVal == oldVal) && newVal) || newVal) {
                    setTimeout(function () {
                        el.addClass(className);
                        setTimeout(function () {
                            el.removeClass(className)
                        }, time)
                    }, 200)
                }
            })
        }
    }
});
angular.module('xw.directives').directive('geetestSmsButton', ["Debug", "User", "$interval", "$window", "Alert", "$http", function (Debug, User, $interval, $window, Alert, $http) {
    return {
        scope: {
            valid: '@',
            mobile: '@',
            type: '@',
            triggered: '='
        },
        templateUrl: 'geetest-sms-button.html',
        link : function (scope) {
            $http.get('/api/user/signup/geetest/register').success(function(result) {
                var s = document.createElement('script');
                var params = {
                    //'745d959dec1191e086febd11aa684c9d'
                    gt: 'd41d16df5b99010ec511ec10aaaafcb8',
                    width: document.body.offsetWidth,
                    challenge: result.challenge
                };

                s.src = 'http://api.geetest.com/get.php?' + Object.keys(params)
                        .map(function (key) {return key + '=' + params[key]})
                        .join('&');


                var fatherDom = angular.element(document.getElementById('geetestContainer'));

                fatherDom.append(s);//append the script where ever you want

                $window.gt_custom_ajax = function(result, id, message) {
                    if(result) {
                        var value = angular.element(document.getElementById('geetestContainer')).find('input');

                        var data = {
                            "geetest_challenge":value[0].value,
                            "geetest_validate":value[1].value,
                            "geetest_seccode":value[2].value,
                            "type" : scope.type,
                            "mobile" : scope.mobile
                        };

                        var timer = $interval(function () {
                            if (!--scope.remains) {
                                $interval.cancel(timer);
                                scope.remains = remains;
                                scope.triggered = true

                                stateMachine('show-refetch', scope.valid == 'true');
                                try {
                                    GeeTest[0].refresh()
                                } catch (e) {}
                            }
                        }, 1000);

                        User.getSmsCode(data).success(function() {
                            console.log("success")
                        }).catch(function (res) {
                            Alert.show(res.data.validationStatus, '验证码发送失败');
                        });

                        stateMachine('hide-geetest')
                    }
                }
            });

            var remains = 30;
            scope.remains = 30;

            scope.$watch('mobile', function (mobile) {
                stateMachine('mobile', scope.valid == 'true')
            });

            scope.showGeetest = function () {
                stateMachine('show-geetest');
            };

            // {0: init-not-ready, 1: init-ready, 2: hide-btn-show-geetest,
            //  3: hide-geetest-show-sending 4 show-re-btn-invalid, 5 re-btn}
            scope.state = 0;
            function stateMachine(action, data) {
                var state = scope.state, isValid = !!data;
                if (action == 'mobile') {
                    if (state === 0 && isValid) {
                        scope.state = 1;
                    } else if (state == 1 && !isValid) {
                        scope.state = 0;
                    } else if (state == 2 && !isValid) {
                        scope.state = 4;
                    }
                    else if (state == 4 && isValid) {
                        scope.state = 5;
                    } else if (state == 5 && !isValid) {
                        scope.state = 4;
                    }
                } else if (action == 'show-geetest') {
                    if (state == 1 || state == 5) {
                        scope.state = 2;
                    }
                } else if (action == 'hide-geetest') {
                    if (state == 2) {
                        scope.state = 3;
                    }
                } else if (action == 'show-refetch') {
                    if (state == 3) {
                        scope.state = isValid ? 5 : 4;
                    }
                }
            }
        }
    }
}])
angular.module('xw.directives').directive('imgLazyLoad', ['$window', '$document', '$timeout', function ($window, $document, $timeout) {

    var lazyDOMs = [],
        document = $document[0],
        windowBottom;

    /**
     * 获取目标元素距离根元素的高度
     */
    function getDOMTop(elem) {
        var top = elem.offsetTop;
        while (elem = elem.offsetParent) {
            top += elem.offsetTop
        }
        return top;
    }

    function getWindowBottom() {
        return document.documentElement.clientHeight + ($window.scrollY ||
            document.documentElement.scrollTop || document.body.scrollTop);
    }

    getWindowBottom.ok = true;

    angular.element($window).on('scroll', function () {
        windowBottom = getWindowBottom();
        for (var i = 0, el; i < lazyDOMs.length;) {
            if (getDOMTop(lazyDOMs[i][0]) < windowBottom) {
                el = angular.element(lazyDOMs[i][0]);
                el[0].src = lazyDOMs[i][1].$eval(el.attr('img-lazy-load'));
                lazyDOMs.splice(i, 1);
            } else {
                i++;
            }
        }
    });

    return {
        restrict: 'A',
        link: function (scope, el, attr) {
            var dom = el[0];
            lazyDOMs.push([dom, scope]);
            var unwatcher = scope.$watch(attr.imgLazyLoad, function (src) {
                if (src) {
                    unwatcher();
                    if (getWindowBottom.ok) {
                        windowBottom = getWindowBottom();
                        getWindowBottom.ok = false;
                        setTimeout(function () {
                            getWindowBottom.ok = true;
                        }, 120); // 120 ms内不再计算window bottom
                        // qq 浏览器会忽略100ms以下的setTimeout !!!!
                        // http://www.qianduan.net/qqliu-lan-qi-x5nei-he-wen-ti-hui-zong/
                    }
                    // todo: 试着用setTimeout来比较这里的性能
                    if (getDOMTop(dom) < windowBottom) {
                        lazyDOMs.some(function (pair, i) {
                            if (pair[0] == dom) {
                                dom.src = src;
                                lazyDOMs.splice(i, 1);
                                return true;
                            }
                        })
                    }
                }
            });

            if (!scope._lazyDestroyBinded) {
                scope._lazyDestroyBinded = true;
                scope.$on('$destroy', function () {
                    for (var i = 0; i < lazyDOMs.length;) {
                        if (lazyDOMs[i][1] == scope) {
                            lazyDOMs.splice(i, 1);
                        } else {
                            i++;
                        }
                    }
                })
            }
        }
    }
}])
angular.module('xw.directives').directive('menuNav', function () {
    return {
        restrict: 'E',
        scope: {
            path: '@',
            localBag: '=',
            isAddressOk: '&'
        },
        templateUrl: 'menu-nav.html',
        link: function ($scope) {
            $scope.goToCart = function () {
                location.href= '/mobile/cart';
            };

            if (location.pathname == '/mobile/me') {
                $scope.path = '/mobile/me';
            }
        }
    }
})
angular.module('xw.directives').directive('modal', function () {
    return {
        restrict: 'E',
        transclude: true,
        scope: {
            show: "=",
            close: '=',
            toggle: '=',
            preClose: '=?'
        },
        templateUrl: 'modal.html',
        link: function (scope, el, attrs) {
            scope.css = {show: false};

            if (attrs.default == 'show') {
                scope.css.show = true;
            }

            scope.show = function () {
                setStatus(event, true);
            };

            scope.close = function (ignorePreClose) {
                if (!ignorePreClose && scope.preClose) {
                    scope.preClose();
                }
                setStatus(event, false);
            };

            scope.toggle = function () {
                setStatus(event);
            };

            function setStatus(event, status) {
                event && event.stopPropagation();
                if (status === undefined) {
                    scope.css.show = !scope.css.show;
                } else {
                    scope.css.show = status;
                }
            }
        }
    }
});
angular.module('xw.directives').directive('shoppingProgressBar', function () {
    return {
        templateUrl: 'shopping-progress-bar.html',
        scope: true,
        link: function (scope) {
            var path = location.pathname;
            if (path == '/mobile/cart') {
                scope.state = 'state1';
            } else if (path == '/mobile/orderaddress') {
                scope.state = 'state2'
            } else if (path == '/mobile/orderpay') {
                scope.state = 'state3'
            }
        }
    }
})
angular.module('xw.directives').directive('smsButton', ["Debug", "User", "$interval", function (Debug, User, $interval) {
    return {
        scope: {
            valid: '@',
            mobile: '@',
            type: '@'
        },
        templateUrl: 'sms-button.html',
        link : function (scope) {
            scope.state = 0; // {0: init-not-ready, 1: init-ready, 2: receiving, 3: refetch-not-ready, 4: refetch-ready}
            scope.remains = 60;

            var cancel = watchMobile();

            scope.getSmsCode = function () {
                scope.state = 2;
                if (cancel) {
                    cancel();
                    cancel = null;
                }

                var timer = $interval(function () {
                    if (!--scope.remains) {
                        $interval.cancel(timer);
                        scope.remains = 60;

                        Debug.assert(typeof scope.valid == 'string', '由@传入的valid应当是string');
                        if (scope.valid === 'true') {
                            scope.state = 4;
                        } else {
                            scope.state = 3;
                        }

                        // 重新 watch mobile
                        cancel = watchMobile();
                    }
                }, 1000);

                User.getSmsCode({
                    mobile: scope.mobile,
                    type: scope.type
                }).then(function (res) {
                    //dev
                    if (res.data.code) {
                        // todo: should alert some thing?
                    }
                }).catch(function (res) {
                    // todo: should alert some thing?
                    alert('获取验证码失败,请稍后重试');
                    Debug.alert(res);
                })
            };

            function watchMobile() {
                return scope.$watch('mobile', function (mobile) {
                    if (scope.state === 0 && mobile && mobile.length == 11) {
                        scope.state = 1;
                    } else if (scope.state === 1 && (!mobile || mobile.length != 11)) {
                        scope.state = 0;
                    } else if (scope.state === 3 && mobile && mobile.length ==11) {
                        scope.state = 4;
                    } else if (scope.state === 4 && (!mobile || mobile.length != 11)) {
                        scope.state = 3;
                    }
                })
            }
        }
    }
}])
angular.module('xw.directives').directive('thanksgiving', ["$timeout", function ($timeout) {
    return {
        restrict: 'E',
        templateUrl: 'thanksgiving.html',
        link: function (scope) {
            $timeout(function () {
                scope.close()
            }, 4500);
        }
    }
}]);
//# sourceMappingURL=app.min.4e7ec31b.js.map
